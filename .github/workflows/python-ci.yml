name: Python CI with Azure DevOps Work Item Validation

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
    types: [opened, edited, synchronize]

jobs:
  validate_work_item:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - name: Check if work item is referenced in the PR description
        id: extract_work_item
        run: |
          echo "Reading PR description from event payload..."
          PR_DESCRIPTION=$(jq -r '.pull_request.body' < "${GITHUB_EVENT_PATH}")
          echo "Extracted PR Description: $PR_DESCRIPTION"

          # Extract Azure DevOps work item ID (AB#123 format)
          WORK_ITEM_ID=$(echo "$PR_DESCRIPTION" | grep -oP 'AB#\K\d+' || echo "")

          if [ -z "$WORK_ITEM_ID" ]; then
            echo "❌ No work item reference (AB#ID) found in PR description."
            exit 1
          else
            echo "✅ Found Work Item ID: $WORK_ITEM_ID"
            echo "work_item_id=$WORK_ITEM_ID" >> "$GITHUB_OUTPUT"
          fi

      - name: Validate the work item in Azure DevOps
        id: validate_work_item
        env:
          WORK_ITEM_ID: ${{ steps.extract_work_item.outputs.work_item_id }}
          AZURE_DEVOPS_PAT: ${{ secrets.AZURE_DEVOPS_PAT }}
        run: |
          echo "Validating Azure DevOps Work Item: $WORK_ITEM_ID"

          RESPONSE=$(curl -s -u :$AZURE_DEVOPS_PAT \
            "https://dev.azure.com/Aptean/AppCentral/_apis/wit/workitems/$WORK_ITEM_ID?api-version=6.0")

          VALID_ID=$(echo "$RESPONSE" | jq -r '.id // empty')

          if [ "$VALID_ID" = "$WORK_ITEM_ID" ]; then
            echo "✅ Work item exists in Azure DevOps."
          else
            echo "❌ Work item not found or invalid PAT/ID."
            exit 1
          fi

  test:
    needs: validate_work_item
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install pytest pytest-cov

      - name: Run tests
        run: |
          python -m pytest tests/ --cov=./ --cov-report=xml

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage.xml
          fail_ci_if_error: false
